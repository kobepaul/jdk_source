/*
 * Copyright (c) 2014, 2016, Oracle and/or its affiliates. All rights reserved.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This code is free software; you can redistribute it and/or modify it
 * under the terms of the GNU General Public License version 2 only, as
 * published by the Free Software Foundation.  Oracle designates this
 * particular file as subject to the "Classpath" exception as provided
 * by Oracle in the LICENSE file that accompanied this code.
 *
 * This code is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
 * version 2 for more details (a copy is included in the LICENSE file that
 * accompanied this code).
 *
 * You should have received a copy of the GNU General Public License version
 * 2 along with this work; if not, write to the Free Software Foundation,
 * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
 * or visit www.oracle.com if you need additional information or have any
 * questions.
 */
package java.lang.invoke;

import jdk.internal.vm.annotation.ForceInline;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;

// This class is auto-generated by java.lang.invoke.VarHandles$GuardMethodGenerator. Do not edit.
final class VarHandleGuards {

    @ForceInline
    @java.lang.invoke.LambdaForm.Compiled
    final static Object guard_L_L(java.lang.invoke.VarHandle handle, Object arg0, java.lang.invoke.VarHandle.AccessDescriptor ad) throws Throwable {
        if (handle.vform.methodType_table[ad.type] == ad.symbolicMethodTypeErased) {
            Object r = java.lang.invoke.MethodHandle.linkToStatic(handle, arg0, handle.vform.getMemberName(ad.mode));
            return ad.returnType.cast(r);
        }
        else {
            java.lang.invoke.MethodHandle mh = handle.getMethodHandle(ad.mode);
            return mh.asType(ad.symbolicMethodTypeInvoker).invokeBasic(handle, arg0);
        }
    }

    @ForceInline
    @java.lang.invoke.LambdaForm.Compiled
    final static void guard_LL_V(java.lang.invoke.VarHandle handle, Object arg0, Object arg1, java.lang.invoke.VarHandle.AccessDescriptor ad) throws Throwable {
        if (handle.vform.methodType_table[ad.type] == ad.symbolicMethodTypeErased) {
            java.lang.invoke.MethodHandle.linkToStatic(handle, arg0, arg1, handle.vform.getMemberName(ad.mode));
        }
        else if (handle.vform.getMethodType_V(ad.type) == ad.symbolicMethodTypeErased) {
            java.lang.invoke.MethodHandle.linkToStatic(handle, arg0, arg1, handle.vform.getMemberName(ad.mode));
        }
        else {
            java.lang.invoke.MethodHandle mh = handle.getMethodHandle(ad.mode);
            mh.asType(ad.symbolicMethodTypeInvoker).invokeBasic(handle, arg0, arg1);
        }
    }

    @ForceInline
    @java.lang.invoke.LambdaForm.Compiled
    final static Object guard_LL_L(java.lang.invoke.VarHandle handle, Object arg0, Object arg1, java.lang.invoke.VarHandle.AccessDescriptor ad) throws Throwable {
        if (handle.vform.methodType_table[ad.type] == ad.symbolicMethodTypeErased) {
            Object r = java.lang.invoke.MethodHandle.linkToStatic(handle, arg0, arg1, handle.vform.getMemberName(ad.mode));
            return ad.returnType.cast(r);
        }
        else {
            java.lang.invoke.MethodHandle mh = handle.getMethodHandle(ad.mode);
            return mh.asType(ad.symbolicMethodTypeInvoker).invokeBasic(handle, arg0, arg1);
        }
    }

    @ForceInline
    @java.lang.invoke.LambdaForm.Compiled
    final static boolean guard_LLL_Z(java.lang.invoke.VarHandle handle, Object arg0, Object arg1, Object arg2, java.lang.invoke.VarHandle.AccessDescriptor ad) throws Throwable {
        if (handle.vform.methodType_table[ad.type] == ad.symbolicMethodTypeErased) {
            return (boolean) java.lang.invoke.MethodHandle.linkToStatic(handle, arg0, arg1, arg2, handle.vform.getMemberName(ad.mode));
        }
        else {
            java.lang.invoke.MethodHandle mh = handle.getMethodHandle(ad.mode);
            return (boolean) mh.asType(ad.symbolicMethodTypeInvoker).invokeBasic(handle, arg0, arg1, arg2);
        }
    }

    @ForceInline
    @java.lang.invoke.LambdaForm.Compiled
    final static Object guard_LLL_L(java.lang.invoke.VarHandle handle, Object arg0, Object arg1, Object arg2, java.lang.invoke.VarHandle.AccessDescriptor ad) throws Throwable {
        if (handle.vform.methodType_table[ad.type] == ad.symbolicMethodTypeErased) {
            Object r = java.lang.invoke.MethodHandle.linkToStatic(handle, arg0, arg1, arg2, handle.vform.getMemberName(ad.mode));
            return ad.returnType.cast(r);
        }
        else {
            java.lang.invoke.MethodHandle mh = handle.getMethodHandle(ad.mode);
            return mh.asType(ad.symbolicMethodTypeInvoker).invokeBasic(handle, arg0, arg1, arg2);
        }
    }

    @ForceInline
    @java.lang.invoke.LambdaForm.Compiled
    final static int guard_L_I(java.lang.invoke.VarHandle handle, Object arg0, java.lang.invoke.VarHandle.AccessDescriptor ad) throws Throwable {
        if (handle.vform.methodType_table[ad.type] == ad.symbolicMethodTypeErased) {
            return (int) java.lang.invoke.MethodHandle.linkToStatic(handle, arg0, handle.vform.getMemberName(ad.mode));
        }
        else {
            java.lang.invoke.MethodHandle mh = handle.getMethodHandle(ad.mode);
            return (int) mh.asType(ad.symbolicMethodTypeInvoker).invokeBasic(handle, arg0);
        }
    }

    @ForceInline
    @java.lang.invoke.LambdaForm.Compiled
    final static void guard_LI_V(java.lang.invoke.VarHandle handle, Object arg0, int arg1, java.lang.invoke.VarHandle.AccessDescriptor ad) throws Throwable {
        if (handle.vform.methodType_table[ad.type] == ad.symbolicMethodTypeErased) {
            java.lang.invoke.MethodHandle.linkToStatic(handle, arg0, arg1, handle.vform.getMemberName(ad.mode));
        }
        else if (handle.vform.getMethodType_V(ad.type) == ad.symbolicMethodTypeErased) {
            java.lang.invoke.MethodHandle.linkToStatic(handle, arg0, arg1, handle.vform.getMemberName(ad.mode));
        }
        else {
            java.lang.invoke.MethodHandle mh = handle.getMethodHandle(ad.mode);
            mh.asType(ad.symbolicMethodTypeInvoker).invokeBasic(handle, arg0, arg1);
        }
    }

    @ForceInline
    @java.lang.invoke.LambdaForm.Compiled
    final static int guard_LI_I(java.lang.invoke.VarHandle handle, Object arg0, int arg1, java.lang.invoke.VarHandle.AccessDescriptor ad) throws Throwable {
        if (handle.vform.methodType_table[ad.type] == ad.symbolicMethodTypeErased) {
            return (int) java.lang.invoke.MethodHandle.linkToStatic(handle, arg0, arg1, handle.vform.getMemberName(ad.mode));
        }
        else {
            java.lang.invoke.MethodHandle mh = handle.getMethodHandle(ad.mode);
            return (int) mh.asType(ad.symbolicMethodTypeInvoker).invokeBasic(handle, arg0, arg1);
        }
    }

    @ForceInline
    @java.lang.invoke.LambdaForm.Compiled
    final static boolean guard_LII_Z(java.lang.invoke.VarHandle handle, Object arg0, int arg1, int arg2, java.lang.invoke.VarHandle.AccessDescriptor ad) throws Throwable {
        if (handle.vform.methodType_table[ad.type] == ad.symbolicMethodTypeErased) {
            return (boolean) java.lang.invoke.MethodHandle.linkToStatic(handle, arg0, arg1, arg2, handle.vform.getMemberName(ad.mode));
        }
        else {
            java.lang.invoke.MethodHandle mh = handle.getMethodHandle(ad.mode);
            return (boolean) mh.asType(ad.symbolicMethodTypeInvoker).invokeBasic(handle, arg0, arg1, arg2);
        }
    }

    @ForceInline
    @java.lang.invoke.LambdaForm.Compiled
    final static int guard_LII_I(java.lang.invoke.VarHandle handle, Object arg0, int arg1, int arg2, java.lang.invoke.VarHandle.AccessDescriptor ad) throws Throwable {
        if (handle.vform.methodType_table[ad.type] == ad.symbolicMethodTypeErased) {
            return (int) java.lang.invoke.MethodHandle.linkToStatic(handle, arg0, arg1, arg2, handle.vform.getMemberName(ad.mode));
        }
        else {
            java.lang.invoke.MethodHandle mh = handle.getMethodHandle(ad.mode);
            return (int) mh.asType(ad.symbolicMethodTypeInvoker).invokeBasic(handle, arg0, arg1, arg2);
        }
    }

    @ForceInline
    @java.lang.invoke.LambdaForm.Compiled
    final static long guard_L_J(java.lang.invoke.VarHandle handle, Object arg0, java.lang.invoke.VarHandle.AccessDescriptor ad) throws Throwable {
        if (handle.vform.methodType_table[ad.type] == ad.symbolicMethodTypeErased) {
            return (long) java.lang.invoke.MethodHandle.linkToStatic(handle, arg0, handle.vform.getMemberName(ad.mode));
        }
        else {
            java.lang.invoke.MethodHandle mh = handle.getMethodHandle(ad.mode);
            return (long) mh.asType(ad.symbolicMethodTypeInvoker).invokeBasic(handle, arg0);
        }
    }

    @ForceInline
    @java.lang.invoke.LambdaForm.Compiled
    final static void guard_LJ_V(java.lang.invoke.VarHandle handle, Object arg0, long arg1, java.lang.invoke.VarHandle.AccessDescriptor ad) throws Throwable {
        if (handle.vform.methodType_table[ad.type] == ad.symbolicMethodTypeErased) {
            java.lang.invoke.MethodHandle.linkToStatic(handle, arg0, arg1, handle.vform.getMemberName(ad.mode));
        }
        else if (handle.vform.getMethodType_V(ad.type) == ad.symbolicMethodTypeErased) {
            java.lang.invoke.MethodHandle.linkToStatic(handle, arg0, arg1, handle.vform.getMemberName(ad.mode));
        }
        else {
            java.lang.invoke.MethodHandle mh = handle.getMethodHandle(ad.mode);
            mh.asType(ad.symbolicMethodTypeInvoker).invokeBasic(handle, arg0, arg1);
        }
    }

    @ForceInline
    @java.lang.invoke.LambdaForm.Compiled
    final static long guard_LJ_J(java.lang.invoke.VarHandle handle, Object arg0, long arg1, java.lang.invoke.VarHandle.AccessDescriptor ad) throws Throwable {
        if (handle.vform.methodType_table[ad.type] == ad.symbolicMethodTypeErased) {
            return (long) java.lang.invoke.MethodHandle.linkToStatic(handle, arg0, arg1, handle.vform.getMemberName(ad.mode));
        }
        else {
            java.lang.invoke.MethodHandle mh = handle.getMethodHandle(ad.mode);
            return (long) mh.asType(ad.symbolicMethodTypeInvoker).invokeBasic(handle, arg0, arg1);
        }
    }

    @ForceInline
    @java.lang.invoke.LambdaForm.Compiled
    final static boolean guard_LJJ_Z(java.lang.invoke.VarHandle handle, Object arg0, long arg1, long arg2, java.lang.invoke.VarHandle.AccessDescriptor ad) throws Throwable {
        if (handle.vform.methodType_table[ad.type] == ad.symbolicMethodTypeErased) {
            return (boolean) java.lang.invoke.MethodHandle.linkToStatic(handle, arg0, arg1, arg2, handle.vform.getMemberName(ad.mode));
        }
        else {
            java.lang.invoke.MethodHandle mh = handle.getMethodHandle(ad.mode);
            return (boolean) mh.asType(ad.symbolicMethodTypeInvoker).invokeBasic(handle, arg0, arg1, arg2);
        }
    }

    @ForceInline
    @java.lang.invoke.LambdaForm.Compiled
    final static long guard_LJJ_J(java.lang.invoke.VarHandle handle, Object arg0, long arg1, long arg2, java.lang.invoke.VarHandle.AccessDescriptor ad) throws Throwable {
        if (handle.vform.methodType_table[ad.type] == ad.symbolicMethodTypeErased) {
            return (long) java.lang.invoke.MethodHandle.linkToStatic(handle, arg0, arg1, arg2, handle.vform.getMemberName(ad.mode));
        }
        else {
            java.lang.invoke.MethodHandle mh = handle.getMethodHandle(ad.mode);
            return (long) mh.asType(ad.symbolicMethodTypeInvoker).invokeBasic(handle, arg0, arg1, arg2);
        }
    }

    @ForceInline
    @java.lang.invoke.LambdaForm.Compiled
    final static float guard_L_F(java.lang.invoke.VarHandle handle, Object arg0, java.lang.invoke.VarHandle.AccessDescriptor ad) throws Throwable {
        if (handle.vform.methodType_table[ad.type] == ad.symbolicMethodTypeErased) {
            return (float) java.lang.invoke.MethodHandle.linkToStatic(handle, arg0, handle.vform.getMemberName(ad.mode));
        }
        else {
            java.lang.invoke.MethodHandle mh = handle.getMethodHandle(ad.mode);
            return (float) mh.asType(ad.symbolicMethodTypeInvoker).invokeBasic(handle, arg0);
        }
    }

    @ForceInline
    @java.lang.invoke.LambdaForm.Compiled
    final static void guard_LF_V(java.lang.invoke.VarHandle handle, Object arg0, float arg1, java.lang.invoke.VarHandle.AccessDescriptor ad) throws Throwable {
        if (handle.vform.methodType_table[ad.type] == ad.symbolicMethodTypeErased) {
            java.lang.invoke.MethodHandle.linkToStatic(handle, arg0, arg1, handle.vform.getMemberName(ad.mode));
        }
        else if (handle.vform.getMethodType_V(ad.type) == ad.symbolicMethodTypeErased) {
            java.lang.invoke.MethodHandle.linkToStatic(handle, arg0, arg1, handle.vform.getMemberName(ad.mode));
        }
        else {
            java.lang.invoke.MethodHandle mh = handle.getMethodHandle(ad.mode);
            mh.asType(ad.symbolicMethodTypeInvoker).invokeBasic(handle, arg0, arg1);
        }
    }

    @ForceInline
    @java.lang.invoke.LambdaForm.Compiled
    final static float guard_LF_F(java.lang.invoke.VarHandle handle, Object arg0, float arg1, java.lang.invoke.VarHandle.AccessDescriptor ad) throws Throwable {
        if (handle.vform.methodType_table[ad.type] == ad.symbolicMethodTypeErased) {
            return (float) java.lang.invoke.MethodHandle.linkToStatic(handle, arg0, arg1, handle.vform.getMemberName(ad.mode));
        }
        else {
            java.lang.invoke.MethodHandle mh = handle.getMethodHandle(ad.mode);
            return (float) mh.asType(ad.symbolicMethodTypeInvoker).invokeBasic(handle, arg0, arg1);
        }
    }

    @ForceInline
    @java.lang.invoke.LambdaForm.Compiled
    final static boolean guard_LFF_Z(java.lang.invoke.VarHandle handle, Object arg0, float arg1, float arg2, java.lang.invoke.VarHandle.AccessDescriptor ad) throws Throwable {
        if (handle.vform.methodType_table[ad.type] == ad.symbolicMethodTypeErased) {
            return (boolean) java.lang.invoke.MethodHandle.linkToStatic(handle, arg0, arg1, arg2, handle.vform.getMemberName(ad.mode));
        }
        else {
            java.lang.invoke.MethodHandle mh = handle.getMethodHandle(ad.mode);
            return (boolean) mh.asType(ad.symbolicMethodTypeInvoker).invokeBasic(handle, arg0, arg1, arg2);
        }
    }

    @ForceInline
    @java.lang.invoke.LambdaForm.Compiled
    final static float guard_LFF_F(java.lang.invoke.VarHandle handle, Object arg0, float arg1, float arg2, java.lang.invoke.VarHandle.AccessDescriptor ad) throws Throwable {
        if (handle.vform.methodType_table[ad.type] == ad.symbolicMethodTypeErased) {
            return (float) java.lang.invoke.MethodHandle.linkToStatic(handle, arg0, arg1, arg2, handle.vform.getMemberName(ad.mode));
        }
        else {
            java.lang.invoke.MethodHandle mh = handle.getMethodHandle(ad.mode);
            return (float) mh.asType(ad.symbolicMethodTypeInvoker).invokeBasic(handle, arg0, arg1, arg2);
        }
    }

    @ForceInline
    @java.lang.invoke.LambdaForm.Compiled
    final static double guard_L_D(java.lang.invoke.VarHandle handle, Object arg0, java.lang.invoke.VarHandle.AccessDescriptor ad) throws Throwable {
        if (handle.vform.methodType_table[ad.type] == ad.symbolicMethodTypeErased) {
            return (double) java.lang.invoke.MethodHandle.linkToStatic(handle, arg0, handle.vform.getMemberName(ad.mode));
        }
        else {
            java.lang.invoke.MethodHandle mh = handle.getMethodHandle(ad.mode);
            return (double) mh.asType(ad.symbolicMethodTypeInvoker).invokeBasic(handle, arg0);
        }
    }

    @ForceInline
    @java.lang.invoke.LambdaForm.Compiled
    final static void guard_LD_V(java.lang.invoke.VarHandle handle, Object arg0, double arg1, java.lang.invoke.VarHandle.AccessDescriptor ad) throws Throwable {
        if (handle.vform.methodType_table[ad.type] == ad.symbolicMethodTypeErased) {
            java.lang.invoke.MethodHandle.linkToStatic(handle, arg0, arg1, handle.vform.getMemberName(ad.mode));
        }
        else if (handle.vform.getMethodType_V(ad.type) == ad.symbolicMethodTypeErased) {
            java.lang.invoke.MethodHandle.linkToStatic(handle, arg0, arg1, handle.vform.getMemberName(ad.mode));
        }
        else {
            java.lang.invoke.MethodHandle mh = handle.getMethodHandle(ad.mode);
            mh.asType(ad.symbolicMethodTypeInvoker).invokeBasic(handle, arg0, arg1);
        }
    }

    @ForceInline
    @java.lang.invoke.LambdaForm.Compiled
    final static double guard_LD_D(java.lang.invoke.VarHandle handle, Object arg0, double arg1, java.lang.invoke.VarHandle.AccessDescriptor ad) throws Throwable {
        if (handle.vform.methodType_table[ad.type] == ad.symbolicMethodTypeErased) {
            return (double) java.lang.invoke.MethodHandle.linkToStatic(handle, arg0, arg1, handle.vform.getMemberName(ad.mode));
        }
        else {
            java.lang.invoke.MethodHandle mh = handle.getMethodHandle(ad.mode);
            return (double) mh.asType(ad.symbolicMethodTypeInvoker).invokeBasic(handle, arg0, arg1);
        }
    }

    @ForceInline
    @java.lang.invoke.LambdaForm.Compiled
    final static boolean guard_LDD_Z(java.lang.invoke.VarHandle handle, Object arg0, double arg1, double arg2, java.lang.invoke.VarHandle.AccessDescriptor ad) throws Throwable {
        if (handle.vform.methodType_table[ad.type] == ad.symbolicMethodTypeErased) {
            return (boolean) java.lang.invoke.MethodHandle.linkToStatic(handle, arg0, arg1, arg2, handle.vform.getMemberName(ad.mode));
        }
        else {
            java.lang.invoke.MethodHandle mh = handle.getMethodHandle(ad.mode);
            return (boolean) mh.asType(ad.symbolicMethodTypeInvoker).invokeBasic(handle, arg0, arg1, arg2);
        }
    }

    @ForceInline
    @java.lang.invoke.LambdaForm.Compiled
    final static double guard_LDD_D(java.lang.invoke.VarHandle handle, Object arg0, double arg1, double arg2, java.lang.invoke.VarHandle.AccessDescriptor ad) throws Throwable {
        if (handle.vform.methodType_table[ad.type] == ad.symbolicMethodTypeErased) {
            return (double) java.lang.invoke.MethodHandle.linkToStatic(handle, arg0, arg1, arg2, handle.vform.getMemberName(ad.mode));
        }
        else {
            java.lang.invoke.MethodHandle mh = handle.getMethodHandle(ad.mode);
            return (double) mh.asType(ad.symbolicMethodTypeInvoker).invokeBasic(handle, arg0, arg1, arg2);
        }
    }

    @ForceInline
    @java.lang.invoke.LambdaForm.Compiled
    final static Object guard__L(java.lang.invoke.VarHandle handle, java.lang.invoke.VarHandle.AccessDescriptor ad) throws Throwable {
        if (handle.vform.methodType_table[ad.type] == ad.symbolicMethodTypeErased) {
            Object r = java.lang.invoke.MethodHandle.linkToStatic(handle, handle.vform.getMemberName(ad.mode));
            return ad.returnType.cast(r);
        }
        else {
            java.lang.invoke.MethodHandle mh = handle.getMethodHandle(ad.mode);
            return mh.asType(ad.symbolicMethodTypeInvoker).invokeBasic(handle);
        }
    }

    @ForceInline
    @java.lang.invoke.LambdaForm.Compiled
    final static void guard_L_V(java.lang.invoke.VarHandle handle, Object arg0, java.lang.invoke.VarHandle.AccessDescriptor ad) throws Throwable {
        if (handle.vform.methodType_table[ad.type] == ad.symbolicMethodTypeErased) {
            java.lang.invoke.MethodHandle.linkToStatic(handle, arg0, handle.vform.getMemberName(ad.mode));
        }
        else if (handle.vform.getMethodType_V(ad.type) == ad.symbolicMethodTypeErased) {
            java.lang.invoke.MethodHandle.linkToStatic(handle, arg0, handle.vform.getMemberName(ad.mode));
        }
        else {
            java.lang.invoke.MethodHandle mh = handle.getMethodHandle(ad.mode);
            mh.asType(ad.symbolicMethodTypeInvoker).invokeBasic(handle, arg0);
        }
    }

    @ForceInline
    @java.lang.invoke.LambdaForm.Compiled
    final static boolean guard_LL_Z(java.lang.invoke.VarHandle handle, Object arg0, Object arg1, java.lang.invoke.VarHandle.AccessDescriptor ad) throws Throwable {
        if (handle.vform.methodType_table[ad.type] == ad.symbolicMethodTypeErased) {
            return (boolean) java.lang.invoke.MethodHandle.linkToStatic(handle, arg0, arg1, handle.vform.getMemberName(ad.mode));
        }
        else {
            java.lang.invoke.MethodHandle mh = handle.getMethodHandle(ad.mode);
            return (boolean) mh.asType(ad.symbolicMethodTypeInvoker).invokeBasic(handle, arg0, arg1);
        }
    }

    @ForceInline
    @java.lang.invoke.LambdaForm.Compiled
    final static int guard__I(java.lang.invoke.VarHandle handle, java.lang.invoke.VarHandle.AccessDescriptor ad) throws Throwable {
        if (handle.vform.methodType_table[ad.type] == ad.symbolicMethodTypeErased) {
            return (int) java.lang.invoke.MethodHandle.linkToStatic(handle, handle.vform.getMemberName(ad.mode));
        }
        else {
            java.lang.invoke.MethodHandle mh = handle.getMethodHandle(ad.mode);
            return (int) mh.asType(ad.symbolicMethodTypeInvoker).invokeBasic(handle);
        }
    }

    @ForceInline
    @java.lang.invoke.LambdaForm.Compiled
    final static void guard_I_V(java.lang.invoke.VarHandle handle, int arg0, java.lang.invoke.VarHandle.AccessDescriptor ad) throws Throwable {
        if (handle.vform.methodType_table[ad.type] == ad.symbolicMethodTypeErased) {
            java.lang.invoke.MethodHandle.linkToStatic(handle, arg0, handle.vform.getMemberName(ad.mode));
        }
        else if (handle.vform.getMethodType_V(ad.type) == ad.symbolicMethodTypeErased) {
            java.lang.invoke.MethodHandle.linkToStatic(handle, arg0, handle.vform.getMemberName(ad.mode));
        }
        else {
            java.lang.invoke.MethodHandle mh = handle.getMethodHandle(ad.mode);
            mh.asType(ad.symbolicMethodTypeInvoker).invokeBasic(handle, arg0);
        }
    }

    @ForceInline
    @java.lang.invoke.LambdaForm.Compiled
    final static int guard_I_I(java.lang.invoke.VarHandle handle, int arg0, java.lang.invoke.VarHandle.AccessDescriptor ad) throws Throwable {
        if (handle.vform.methodType_table[ad.type] == ad.symbolicMethodTypeErased) {
            return (int) java.lang.invoke.MethodHandle.linkToStatic(handle, arg0, handle.vform.getMemberName(ad.mode));
        }
        else {
            java.lang.invoke.MethodHandle mh = handle.getMethodHandle(ad.mode);
            return (int) mh.asType(ad.symbolicMethodTypeInvoker).invokeBasic(handle, arg0);
        }
    }

    @ForceInline
    @java.lang.invoke.LambdaForm.Compiled
    final static boolean guard_II_Z(java.lang.invoke.VarHandle handle, int arg0, int arg1, java.lang.invoke.VarHandle.AccessDescriptor ad) throws Throwable {
        if (handle.vform.methodType_table[ad.type] == ad.symbolicMethodTypeErased) {
            return (boolean) java.lang.invoke.MethodHandle.linkToStatic(handle, arg0, arg1, handle.vform.getMemberName(ad.mode));
        }
        else {
            java.lang.invoke.MethodHandle mh = handle.getMethodHandle(ad.mode);
            return (boolean) mh.asType(ad.symbolicMethodTypeInvoker).invokeBasic(handle, arg0, arg1);
        }
    }

    @ForceInline
    @java.lang.invoke.LambdaForm.Compiled
    final static int guard_II_I(java.lang.invoke.VarHandle handle, int arg0, int arg1, java.lang.invoke.VarHandle.AccessDescriptor ad) throws Throwable {
        if (handle.vform.methodType_table[ad.type] == ad.symbolicMethodTypeErased) {
            return (int) java.lang.invoke.MethodHandle.linkToStatic(handle, arg0, arg1, handle.vform.getMemberName(ad.mode));
        }
        else {
            java.lang.invoke.MethodHandle mh = handle.getMethodHandle(ad.mode);
            return (int) mh.asType(ad.symbolicMethodTypeInvoker).invokeBasic(handle, arg0, arg1);
        }
    }

    @ForceInline
    @java.lang.invoke.LambdaForm.Compiled
    final static long guard__J(java.lang.invoke.VarHandle handle, java.lang.invoke.VarHandle.AccessDescriptor ad) throws Throwable {
        if (handle.vform.methodType_table[ad.type] == ad.symbolicMethodTypeErased) {
            return (long) java.lang.invoke.MethodHandle.linkToStatic(handle, handle.vform.getMemberName(ad.mode));
        }
        else {
            java.lang.invoke.MethodHandle mh = handle.getMethodHandle(ad.mode);
            return (long) mh.asType(ad.symbolicMethodTypeInvoker).invokeBasic(handle);
        }
    }

    @ForceInline
    @java.lang.invoke.LambdaForm.Compiled
    final static void guard_J_V(java.lang.invoke.VarHandle handle, long arg0, java.lang.invoke.VarHandle.AccessDescriptor ad) throws Throwable {
        if (handle.vform.methodType_table[ad.type] == ad.symbolicMethodTypeErased) {
            java.lang.invoke.MethodHandle.linkToStatic(handle, arg0, handle.vform.getMemberName(ad.mode));
        }
        else if (handle.vform.getMethodType_V(ad.type) == ad.symbolicMethodTypeErased) {
            java.lang.invoke.MethodHandle.linkToStatic(handle, arg0, handle.vform.getMemberName(ad.mode));
        }
        else {
            java.lang.invoke.MethodHandle mh = handle.getMethodHandle(ad.mode);
            mh.asType(ad.symbolicMethodTypeInvoker).invokeBasic(handle, arg0);
        }
    }

    @ForceInline
    @java.lang.invoke.LambdaForm.Compiled
    final static long guard_J_J(java.lang.invoke.VarHandle handle, long arg0, java.lang.invoke.VarHandle.AccessDescriptor ad) throws Throwable {
        if (handle.vform.methodType_table[ad.type] == ad.symbolicMethodTypeErased) {
            return (long) java.lang.invoke.MethodHandle.linkToStatic(handle, arg0, handle.vform.getMemberName(ad.mode));
        }
        else {
            java.lang.invoke.MethodHandle mh = handle.getMethodHandle(ad.mode);
            return (long) mh.asType(ad.symbolicMethodTypeInvoker).invokeBasic(handle, arg0);
        }
    }

    @ForceInline
    @java.lang.invoke.LambdaForm.Compiled
    final static boolean guard_JJ_Z(java.lang.invoke.VarHandle handle, long arg0, long arg1, java.lang.invoke.VarHandle.AccessDescriptor ad) throws Throwable {
        if (handle.vform.methodType_table[ad.type] == ad.symbolicMethodTypeErased) {
            return (boolean) java.lang.invoke.MethodHandle.linkToStatic(handle, arg0, arg1, handle.vform.getMemberName(ad.mode));
        }
        else {
            java.lang.invoke.MethodHandle mh = handle.getMethodHandle(ad.mode);
            return (boolean) mh.asType(ad.symbolicMethodTypeInvoker).invokeBasic(handle, arg0, arg1);
        }
    }

    @ForceInline
    @java.lang.invoke.LambdaForm.Compiled
    final static long guard_JJ_J(java.lang.invoke.VarHandle handle, long arg0, long arg1, java.lang.invoke.VarHandle.AccessDescriptor ad) throws Throwable {
        if (handle.vform.methodType_table[ad.type] == ad.symbolicMethodTypeErased) {
            return (long) java.lang.invoke.MethodHandle.linkToStatic(handle, arg0, arg1, handle.vform.getMemberName(ad.mode));
        }
        else {
            java.lang.invoke.MethodHandle mh = handle.getMethodHandle(ad.mode);
            return (long) mh.asType(ad.symbolicMethodTypeInvoker).invokeBasic(handle, arg0, arg1);
        }
    }

    @ForceInline
    @java.lang.invoke.LambdaForm.Compiled
    final static float guard__F(java.lang.invoke.VarHandle handle, java.lang.invoke.VarHandle.AccessDescriptor ad) throws Throwable {
        if (handle.vform.methodType_table[ad.type] == ad.symbolicMethodTypeErased) {
            return (float) java.lang.invoke.MethodHandle.linkToStatic(handle, handle.vform.getMemberName(ad.mode));
        }
        else {
            java.lang.invoke.MethodHandle mh = handle.getMethodHandle(ad.mode);
            return (float) mh.asType(ad.symbolicMethodTypeInvoker).invokeBasic(handle);
        }
    }

    @ForceInline
    @java.lang.invoke.LambdaForm.Compiled
    final static void guard_F_V(java.lang.invoke.VarHandle handle, float arg0, java.lang.invoke.VarHandle.AccessDescriptor ad) throws Throwable {
        if (handle.vform.methodType_table[ad.type] == ad.symbolicMethodTypeErased) {
            java.lang.invoke.MethodHandle.linkToStatic(handle, arg0, handle.vform.getMemberName(ad.mode));
        }
        else if (handle.vform.getMethodType_V(ad.type) == ad.symbolicMethodTypeErased) {
            java.lang.invoke.MethodHandle.linkToStatic(handle, arg0, handle.vform.getMemberName(ad.mode));
        }
        else {
            java.lang.invoke.MethodHandle mh = handle.getMethodHandle(ad.mode);
            mh.asType(ad.symbolicMethodTypeInvoker).invokeBasic(handle, arg0);
        }
    }

    @ForceInline
    @java.lang.invoke.LambdaForm.Compiled
    final static float guard_F_F(java.lang.invoke.VarHandle handle, float arg0, java.lang.invoke.VarHandle.AccessDescriptor ad) throws Throwable {
        if (handle.vform.methodType_table[ad.type] == ad.symbolicMethodTypeErased) {
            return (float) java.lang.invoke.MethodHandle.linkToStatic(handle, arg0, handle.vform.getMemberName(ad.mode));
        }
        else {
            java.lang.invoke.MethodHandle mh = handle.getMethodHandle(ad.mode);
            return (float) mh.asType(ad.symbolicMethodTypeInvoker).invokeBasic(handle, arg0);
        }
    }

    @ForceInline
    @java.lang.invoke.LambdaForm.Compiled
    final static boolean guard_FF_Z(java.lang.invoke.VarHandle handle, float arg0, float arg1, java.lang.invoke.VarHandle.AccessDescriptor ad) throws Throwable {
        if (handle.vform.methodType_table[ad.type] == ad.symbolicMethodTypeErased) {
            return (boolean) java.lang.invoke.MethodHandle.linkToStatic(handle, arg0, arg1, handle.vform.getMemberName(ad.mode));
        }
        else {
            java.lang.invoke.MethodHandle mh = handle.getMethodHandle(ad.mode);
            return (boolean) mh.asType(ad.symbolicMethodTypeInvoker).invokeBasic(handle, arg0, arg1);
        }
    }

    @ForceInline
    @java.lang.invoke.LambdaForm.Compiled
    final static float guard_FF_F(java.lang.invoke.VarHandle handle, float arg0, float arg1, java.lang.invoke.VarHandle.AccessDescriptor ad) throws Throwable {
        if (handle.vform.methodType_table[ad.type] == ad.symbolicMethodTypeErased) {
            return (float) java.lang.invoke.MethodHandle.linkToStatic(handle, arg0, arg1, handle.vform.getMemberName(ad.mode));
        }
        else {
            java.lang.invoke.MethodHandle mh = handle.getMethodHandle(ad.mode);
            return (float) mh.asType(ad.symbolicMethodTypeInvoker).invokeBasic(handle, arg0, arg1);
        }
    }

    @ForceInline
    @java.lang.invoke.LambdaForm.Compiled
    final static double guard__D(java.lang.invoke.VarHandle handle, java.lang.invoke.VarHandle.AccessDescriptor ad) throws Throwable {
        if (handle.vform.methodType_table[ad.type] == ad.symbolicMethodTypeErased) {
            return (double) java.lang.invoke.MethodHandle.linkToStatic(handle, handle.vform.getMemberName(ad.mode));
        }
        else {
            java.lang.invoke.MethodHandle mh = handle.getMethodHandle(ad.mode);
            return (double) mh.asType(ad.symbolicMethodTypeInvoker).invokeBasic(handle);
        }
    }

    @ForceInline
    @java.lang.invoke.LambdaForm.Compiled
    final static void guard_D_V(java.lang.invoke.VarHandle handle, double arg0, java.lang.invoke.VarHandle.AccessDescriptor ad) throws Throwable {
        if (handle.vform.methodType_table[ad.type] == ad.symbolicMethodTypeErased) {
            java.lang.invoke.MethodHandle.linkToStatic(handle, arg0, handle.vform.getMemberName(ad.mode));
        }
        else if (handle.vform.getMethodType_V(ad.type) == ad.symbolicMethodTypeErased) {
            java.lang.invoke.MethodHandle.linkToStatic(handle, arg0, handle.vform.getMemberName(ad.mode));
        }
        else {
            java.lang.invoke.MethodHandle mh = handle.getMethodHandle(ad.mode);
            mh.asType(ad.symbolicMethodTypeInvoker).invokeBasic(handle, arg0);
        }
    }

    @ForceInline
    @java.lang.invoke.LambdaForm.Compiled
    final static double guard_D_D(java.lang.invoke.VarHandle handle, double arg0, java.lang.invoke.VarHandle.AccessDescriptor ad) throws Throwable {
        if (handle.vform.methodType_table[ad.type] == ad.symbolicMethodTypeErased) {
            return (double) java.lang.invoke.MethodHandle.linkToStatic(handle, arg0, handle.vform.getMemberName(ad.mode));
        }
        else {
            java.lang.invoke.MethodHandle mh = handle.getMethodHandle(ad.mode);
            return (double) mh.asType(ad.symbolicMethodTypeInvoker).invokeBasic(handle, arg0);
        }
    }

    @ForceInline
    @java.lang.invoke.LambdaForm.Compiled
    final static boolean guard_DD_Z(java.lang.invoke.VarHandle handle, double arg0, double arg1, java.lang.invoke.VarHandle.AccessDescriptor ad) throws Throwable {
        if (handle.vform.methodType_table[ad.type] == ad.symbolicMethodTypeErased) {
            return (boolean) java.lang.invoke.MethodHandle.linkToStatic(handle, arg0, arg1, handle.vform.getMemberName(ad.mode));
        }
        else {
            java.lang.invoke.MethodHandle mh = handle.getMethodHandle(ad.mode);
            return (boolean) mh.asType(ad.symbolicMethodTypeInvoker).invokeBasic(handle, arg0, arg1);
        }
    }

    @ForceInline
    @java.lang.invoke.LambdaForm.Compiled
    final static double guard_DD_D(java.lang.invoke.VarHandle handle, double arg0, double arg1, java.lang.invoke.VarHandle.AccessDescriptor ad) throws Throwable {
        if (handle.vform.methodType_table[ad.type] == ad.symbolicMethodTypeErased) {
            return (double) java.lang.invoke.MethodHandle.linkToStatic(handle, arg0, arg1, handle.vform.getMemberName(ad.mode));
        }
        else {
            java.lang.invoke.MethodHandle mh = handle.getMethodHandle(ad.mode);
            return (double) mh.asType(ad.symbolicMethodTypeInvoker).invokeBasic(handle, arg0, arg1);
        }
    }

    @ForceInline
    @java.lang.invoke.LambdaForm.Compiled
    final static Object guard_LI_L(java.lang.invoke.VarHandle handle, Object arg0, int arg1, java.lang.invoke.VarHandle.AccessDescriptor ad) throws Throwable {
        if (handle.vform.methodType_table[ad.type] == ad.symbolicMethodTypeErased) {
            Object r = java.lang.invoke.MethodHandle.linkToStatic(handle, arg0, arg1, handle.vform.getMemberName(ad.mode));
            return ad.returnType.cast(r);
        }
        else {
            java.lang.invoke.MethodHandle mh = handle.getMethodHandle(ad.mode);
            return mh.asType(ad.symbolicMethodTypeInvoker).invokeBasic(handle, arg0, arg1);
        }
    }

    @ForceInline
    @java.lang.invoke.LambdaForm.Compiled
    final static void guard_LIL_V(java.lang.invoke.VarHandle handle, Object arg0, int arg1, Object arg2, java.lang.invoke.VarHandle.AccessDescriptor ad) throws Throwable {
        if (handle.vform.methodType_table[ad.type] == ad.symbolicMethodTypeErased) {
            java.lang.invoke.MethodHandle.linkToStatic(handle, arg0, arg1, arg2, handle.vform.getMemberName(ad.mode));
        }
        else if (handle.vform.getMethodType_V(ad.type) == ad.symbolicMethodTypeErased) {
            java.lang.invoke.MethodHandle.linkToStatic(handle, arg0, arg1, arg2, handle.vform.getMemberName(ad.mode));
        }
        else {
            java.lang.invoke.MethodHandle mh = handle.getMethodHandle(ad.mode);
            mh.asType(ad.symbolicMethodTypeInvoker).invokeBasic(handle, arg0, arg1, arg2);
        }
    }

    @ForceInline
    @java.lang.invoke.LambdaForm.Compiled
    final static Object guard_LIL_L(java.lang.invoke.VarHandle handle, Object arg0, int arg1, Object arg2, java.lang.invoke.VarHandle.AccessDescriptor ad) throws Throwable {
        if (handle.vform.methodType_table[ad.type] == ad.symbolicMethodTypeErased) {
            Object r = java.lang.invoke.MethodHandle.linkToStatic(handle, arg0, arg1, arg2, handle.vform.getMemberName(ad.mode));
            return ad.returnType.cast(r);
        }
        else {
            java.lang.invoke.MethodHandle mh = handle.getMethodHandle(ad.mode);
            return mh.asType(ad.symbolicMethodTypeInvoker).invokeBasic(handle, arg0, arg1, arg2);
        }
    }

    @ForceInline
    @java.lang.invoke.LambdaForm.Compiled
    final static boolean guard_LILL_Z(java.lang.invoke.VarHandle handle, Object arg0, int arg1, Object arg2, Object arg3, java.lang.invoke.VarHandle.AccessDescriptor ad) throws Throwable {
        if (handle.vform.methodType_table[ad.type] == ad.symbolicMethodTypeErased) {
            return (boolean) java.lang.invoke.MethodHandle.linkToStatic(handle, arg0, arg1, arg2, arg3, handle.vform.getMemberName(ad.mode));
        }
        else {
            java.lang.invoke.MethodHandle mh = handle.getMethodHandle(ad.mode);
            return (boolean) mh.asType(ad.symbolicMethodTypeInvoker).invokeBasic(handle, arg0, arg1, arg2, arg3);
        }
    }

    @ForceInline
    @java.lang.invoke.LambdaForm.Compiled
    final static Object guard_LILL_L(java.lang.invoke.VarHandle handle, Object arg0, int arg1, Object arg2, Object arg3, java.lang.invoke.VarHandle.AccessDescriptor ad) throws Throwable {
        if (handle.vform.methodType_table[ad.type] == ad.symbolicMethodTypeErased) {
            Object r = java.lang.invoke.MethodHandle.linkToStatic(handle, arg0, arg1, arg2, arg3, handle.vform.getMemberName(ad.mode));
            return ad.returnType.cast(r);
        }
        else {
            java.lang.invoke.MethodHandle mh = handle.getMethodHandle(ad.mode);
            return mh.asType(ad.symbolicMethodTypeInvoker).invokeBasic(handle, arg0, arg1, arg2, arg3);
        }
    }

    @ForceInline
    @java.lang.invoke.LambdaForm.Compiled
    final static void guard_LII_V(java.lang.invoke.VarHandle handle, Object arg0, int arg1, int arg2, java.lang.invoke.VarHandle.AccessDescriptor ad) throws Throwable {
        if (handle.vform.methodType_table[ad.type] == ad.symbolicMethodTypeErased) {
            java.lang.invoke.MethodHandle.linkToStatic(handle, arg0, arg1, arg2, handle.vform.getMemberName(ad.mode));
        }
        else if (handle.vform.getMethodType_V(ad.type) == ad.symbolicMethodTypeErased) {
            java.lang.invoke.MethodHandle.linkToStatic(handle, arg0, arg1, arg2, handle.vform.getMemberName(ad.mode));
        }
        else {
            java.lang.invoke.MethodHandle mh = handle.getMethodHandle(ad.mode);
            mh.asType(ad.symbolicMethodTypeInvoker).invokeBasic(handle, arg0, arg1, arg2);
        }
    }

    @ForceInline
    @java.lang.invoke.LambdaForm.Compiled
    final static boolean guard_LIII_Z(java.lang.invoke.VarHandle handle, Object arg0, int arg1, int arg2, int arg3, java.lang.invoke.VarHandle.AccessDescriptor ad) throws Throwable {
        if (handle.vform.methodType_table[ad.type] == ad.symbolicMethodTypeErased) {
            return (boolean) java.lang.invoke.MethodHandle.linkToStatic(handle, arg0, arg1, arg2, arg3, handle.vform.getMemberName(ad.mode));
        }
        else {
            java.lang.invoke.MethodHandle mh = handle.getMethodHandle(ad.mode);
            return (boolean) mh.asType(ad.symbolicMethodTypeInvoker).invokeBasic(handle, arg0, arg1, arg2, arg3);
        }
    }

    @ForceInline
    @java.lang.invoke.LambdaForm.Compiled
    final static int guard_LIII_I(java.lang.invoke.VarHandle handle, Object arg0, int arg1, int arg2, int arg3, java.lang.invoke.VarHandle.AccessDescriptor ad) throws Throwable {
        if (handle.vform.methodType_table[ad.type] == ad.symbolicMethodTypeErased) {
            return (int) java.lang.invoke.MethodHandle.linkToStatic(handle, arg0, arg1, arg2, arg3, handle.vform.getMemberName(ad.mode));
        }
        else {
            java.lang.invoke.MethodHandle mh = handle.getMethodHandle(ad.mode);
            return (int) mh.asType(ad.symbolicMethodTypeInvoker).invokeBasic(handle, arg0, arg1, arg2, arg3);
        }
    }

    @ForceInline
    @java.lang.invoke.LambdaForm.Compiled
    final static long guard_LI_J(java.lang.invoke.VarHandle handle, Object arg0, int arg1, java.lang.invoke.VarHandle.AccessDescriptor ad) throws Throwable {
        if (handle.vform.methodType_table[ad.type] == ad.symbolicMethodTypeErased) {
            return (long) java.lang.invoke.MethodHandle.linkToStatic(handle, arg0, arg1, handle.vform.getMemberName(ad.mode));
        }
        else {
            java.lang.invoke.MethodHandle mh = handle.getMethodHandle(ad.mode);
            return (long) mh.asType(ad.symbolicMethodTypeInvoker).invokeBasic(handle, arg0, arg1);
        }
    }

    @ForceInline
    @java.lang.invoke.LambdaForm.Compiled
    final static void guard_LIJ_V(java.lang.invoke.VarHandle handle, Object arg0, int arg1, long arg2, java.lang.invoke.VarHandle.AccessDescriptor ad) throws Throwable {
        if (handle.vform.methodType_table[ad.type] == ad.symbolicMethodTypeErased) {
            java.lang.invoke.MethodHandle.linkToStatic(handle, arg0, arg1, arg2, handle.vform.getMemberName(ad.mode));
        }
        else if (handle.vform.getMethodType_V(ad.type) == ad.symbolicMethodTypeErased) {
            java.lang.invoke.MethodHandle.linkToStatic(handle, arg0, arg1, arg2, handle.vform.getMemberName(ad.mode));
        }
        else {
            java.lang.invoke.MethodHandle mh = handle.getMethodHandle(ad.mode);
            mh.asType(ad.symbolicMethodTypeInvoker).invokeBasic(handle, arg0, arg1, arg2);
        }
    }

    @ForceInline
    @java.lang.invoke.LambdaForm.Compiled
    final static long guard_LIJ_J(java.lang.invoke.VarHandle handle, Object arg0, int arg1, long arg2, java.lang.invoke.VarHandle.AccessDescriptor ad) throws Throwable {
        if (handle.vform.methodType_table[ad.type] == ad.symbolicMethodTypeErased) {
            return (long) java.lang.invoke.MethodHandle.linkToStatic(handle, arg0, arg1, arg2, handle.vform.getMemberName(ad.mode));
        }
        else {
            java.lang.invoke.MethodHandle mh = handle.getMethodHandle(ad.mode);
            return (long) mh.asType(ad.symbolicMethodTypeInvoker).invokeBasic(handle, arg0, arg1, arg2);
        }
    }

    @ForceInline
    @java.lang.invoke.LambdaForm.Compiled
    final static boolean guard_LIJJ_Z(java.lang.invoke.VarHandle handle, Object arg0, int arg1, long arg2, long arg3, java.lang.invoke.VarHandle.AccessDescriptor ad) throws Throwable {
        if (handle.vform.methodType_table[ad.type] == ad.symbolicMethodTypeErased) {
            return (boolean) java.lang.invoke.MethodHandle.linkToStatic(handle, arg0, arg1, arg2, arg3, handle.vform.getMemberName(ad.mode));
        }
        else {
            java.lang.invoke.MethodHandle mh = handle.getMethodHandle(ad.mode);
            return (boolean) mh.asType(ad.symbolicMethodTypeInvoker).invokeBasic(handle, arg0, arg1, arg2, arg3);
        }
    }

    @ForceInline
    @java.lang.invoke.LambdaForm.Compiled
    final static long guard_LIJJ_J(java.lang.invoke.VarHandle handle, Object arg0, int arg1, long arg2, long arg3, java.lang.invoke.VarHandle.AccessDescriptor ad) throws Throwable {
        if (handle.vform.methodType_table[ad.type] == ad.symbolicMethodTypeErased) {
            return (long) java.lang.invoke.MethodHandle.linkToStatic(handle, arg0, arg1, arg2, arg3, handle.vform.getMemberName(ad.mode));
        }
        else {
            java.lang.invoke.MethodHandle mh = handle.getMethodHandle(ad.mode);
            return (long) mh.asType(ad.symbolicMethodTypeInvoker).invokeBasic(handle, arg0, arg1, arg2, arg3);
        }
    }

    @ForceInline
    @java.lang.invoke.LambdaForm.Compiled
    final static float guard_LI_F(java.lang.invoke.VarHandle handle, Object arg0, int arg1, java.lang.invoke.VarHandle.AccessDescriptor ad) throws Throwable {
        if (handle.vform.methodType_table[ad.type] == ad.symbolicMethodTypeErased) {
            return (float) java.lang.invoke.MethodHandle.linkToStatic(handle, arg0, arg1, handle.vform.getMemberName(ad.mode));
        }
        else {
            java.lang.invoke.MethodHandle mh = handle.getMethodHandle(ad.mode);
            return (float) mh.asType(ad.symbolicMethodTypeInvoker).invokeBasic(handle, arg0, arg1);
        }
    }

    @ForceInline
    @java.lang.invoke.LambdaForm.Compiled
    final static void guard_LIF_V(java.lang.invoke.VarHandle handle, Object arg0, int arg1, float arg2, java.lang.invoke.VarHandle.AccessDescriptor ad) throws Throwable {
        if (handle.vform.methodType_table[ad.type] == ad.symbolicMethodTypeErased) {
            java.lang.invoke.MethodHandle.linkToStatic(handle, arg0, arg1, arg2, handle.vform.getMemberName(ad.mode));
        }
        else if (handle.vform.getMethodType_V(ad.type) == ad.symbolicMethodTypeErased) {
            java.lang.invoke.MethodHandle.linkToStatic(handle, arg0, arg1, arg2, handle.vform.getMemberName(ad.mode));
        }
        else {
            java.lang.invoke.MethodHandle mh = handle.getMethodHandle(ad.mode);
            mh.asType(ad.symbolicMethodTypeInvoker).invokeBasic(handle, arg0, arg1, arg2);
        }
    }

    @ForceInline
    @java.lang.invoke.LambdaForm.Compiled
    final static float guard_LIF_F(java.lang.invoke.VarHandle handle, Object arg0, int arg1, float arg2, java.lang.invoke.VarHandle.AccessDescriptor ad) throws Throwable {
        if (handle.vform.methodType_table[ad.type] == ad.symbolicMethodTypeErased) {
            return (float) java.lang.invoke.MethodHandle.linkToStatic(handle, arg0, arg1, arg2, handle.vform.getMemberName(ad.mode));
        }
        else {
            java.lang.invoke.MethodHandle mh = handle.getMethodHandle(ad.mode);
            return (float) mh.asType(ad.symbolicMethodTypeInvoker).invokeBasic(handle, arg0, arg1, arg2);
        }
    }

    @ForceInline
    @java.lang.invoke.LambdaForm.Compiled
    final static boolean guard_LIFF_Z(java.lang.invoke.VarHandle handle, Object arg0, int arg1, float arg2, float arg3, java.lang.invoke.VarHandle.AccessDescriptor ad) throws Throwable {
        if (handle.vform.methodType_table[ad.type] == ad.symbolicMethodTypeErased) {
            return (boolean) java.lang.invoke.MethodHandle.linkToStatic(handle, arg0, arg1, arg2, arg3, handle.vform.getMemberName(ad.mode));
        }
        else {
            java.lang.invoke.MethodHandle mh = handle.getMethodHandle(ad.mode);
            return (boolean) mh.asType(ad.symbolicMethodTypeInvoker).invokeBasic(handle, arg0, arg1, arg2, arg3);
        }
    }

    @ForceInline
    @java.lang.invoke.LambdaForm.Compiled
    final static float guard_LIFF_F(java.lang.invoke.VarHandle handle, Object arg0, int arg1, float arg2, float arg3, java.lang.invoke.VarHandle.AccessDescriptor ad) throws Throwable {
        if (handle.vform.methodType_table[ad.type] == ad.symbolicMethodTypeErased) {
            return (float) java.lang.invoke.MethodHandle.linkToStatic(handle, arg0, arg1, arg2, arg3, handle.vform.getMemberName(ad.mode));
        }
        else {
            java.lang.invoke.MethodHandle mh = handle.getMethodHandle(ad.mode);
            return (float) mh.asType(ad.symbolicMethodTypeInvoker).invokeBasic(handle, arg0, arg1, arg2, arg3);
        }
    }

    @ForceInline
    @java.lang.invoke.LambdaForm.Compiled
    final static double guard_LI_D(java.lang.invoke.VarHandle handle, Object arg0, int arg1, java.lang.invoke.VarHandle.AccessDescriptor ad) throws Throwable {
        if (handle.vform.methodType_table[ad.type] == ad.symbolicMethodTypeErased) {
            return (double) java.lang.invoke.MethodHandle.linkToStatic(handle, arg0, arg1, handle.vform.getMemberName(ad.mode));
        }
        else {
            java.lang.invoke.MethodHandle mh = handle.getMethodHandle(ad.mode);
            return (double) mh.asType(ad.symbolicMethodTypeInvoker).invokeBasic(handle, arg0, arg1);
        }
    }

    @ForceInline
    @java.lang.invoke.LambdaForm.Compiled
    final static void guard_LID_V(java.lang.invoke.VarHandle handle, Object arg0, int arg1, double arg2, java.lang.invoke.VarHandle.AccessDescriptor ad) throws Throwable {
        if (handle.vform.methodType_table[ad.type] == ad.symbolicMethodTypeErased) {
            java.lang.invoke.MethodHandle.linkToStatic(handle, arg0, arg1, arg2, handle.vform.getMemberName(ad.mode));
        }
        else if (handle.vform.getMethodType_V(ad.type) == ad.symbolicMethodTypeErased) {
            java.lang.invoke.MethodHandle.linkToStatic(handle, arg0, arg1, arg2, handle.vform.getMemberName(ad.mode));
        }
        else {
            java.lang.invoke.MethodHandle mh = handle.getMethodHandle(ad.mode);
            mh.asType(ad.symbolicMethodTypeInvoker).invokeBasic(handle, arg0, arg1, arg2);
        }
    }

    @ForceInline
    @java.lang.invoke.LambdaForm.Compiled
    final static double guard_LID_D(java.lang.invoke.VarHandle handle, Object arg0, int arg1, double arg2, java.lang.invoke.VarHandle.AccessDescriptor ad) throws Throwable {
        if (handle.vform.methodType_table[ad.type] == ad.symbolicMethodTypeErased) {
            return (double) java.lang.invoke.MethodHandle.linkToStatic(handle, arg0, arg1, arg2, handle.vform.getMemberName(ad.mode));
        }
        else {
            java.lang.invoke.MethodHandle mh = handle.getMethodHandle(ad.mode);
            return (double) mh.asType(ad.symbolicMethodTypeInvoker).invokeBasic(handle, arg0, arg1, arg2);
        }
    }

    @ForceInline
    @java.lang.invoke.LambdaForm.Compiled
    final static boolean guard_LIDD_Z(java.lang.invoke.VarHandle handle, Object arg0, int arg1, double arg2, double arg3, java.lang.invoke.VarHandle.AccessDescriptor ad) throws Throwable {
        if (handle.vform.methodType_table[ad.type] == ad.symbolicMethodTypeErased) {
            return (boolean) java.lang.invoke.MethodHandle.linkToStatic(handle, arg0, arg1, arg2, arg3, handle.vform.getMemberName(ad.mode));
        }
        else {
            java.lang.invoke.MethodHandle mh = handle.getMethodHandle(ad.mode);
            return (boolean) mh.asType(ad.symbolicMethodTypeInvoker).invokeBasic(handle, arg0, arg1, arg2, arg3);
        }
    }

    @ForceInline
    @java.lang.invoke.LambdaForm.Compiled
    final static double guard_LIDD_D(java.lang.invoke.VarHandle handle, Object arg0, int arg1, double arg2, double arg3, java.lang.invoke.VarHandle.AccessDescriptor ad) throws Throwable {
        if (handle.vform.methodType_table[ad.type] == ad.symbolicMethodTypeErased) {
            return (double) java.lang.invoke.MethodHandle.linkToStatic(handle, arg0, arg1, arg2, arg3, handle.vform.getMemberName(ad.mode));
        }
        else {
            java.lang.invoke.MethodHandle mh = handle.getMethodHandle(ad.mode);
            return (double) mh.asType(ad.symbolicMethodTypeInvoker).invokeBasic(handle, arg0, arg1, arg2, arg3);
        }
    }

    @ForceInline
    @java.lang.invoke.LambdaForm.Compiled
    final static int guard_LJ_I(java.lang.invoke.VarHandle handle, Object arg0, long arg1, java.lang.invoke.VarHandle.AccessDescriptor ad) throws Throwable {
        if (handle.vform.methodType_table[ad.type] == ad.symbolicMethodTypeErased) {
            return (int) java.lang.invoke.MethodHandle.linkToStatic(handle, arg0, arg1, handle.vform.getMemberName(ad.mode));
        }
        else {
            java.lang.invoke.MethodHandle mh = handle.getMethodHandle(ad.mode);
            return (int) mh.asType(ad.symbolicMethodTypeInvoker).invokeBasic(handle, arg0, arg1);
        }
    }

    @ForceInline
    @java.lang.invoke.LambdaForm.Compiled
    final static void guard_LJI_V(java.lang.invoke.VarHandle handle, Object arg0, long arg1, int arg2, java.lang.invoke.VarHandle.AccessDescriptor ad) throws Throwable {
        if (handle.vform.methodType_table[ad.type] == ad.symbolicMethodTypeErased) {
            java.lang.invoke.MethodHandle.linkToStatic(handle, arg0, arg1, arg2, handle.vform.getMemberName(ad.mode));
        }
        else if (handle.vform.getMethodType_V(ad.type) == ad.symbolicMethodTypeErased) {
            java.lang.invoke.MethodHandle.linkToStatic(handle, arg0, arg1, arg2, handle.vform.getMemberName(ad.mode));
        }
        else {
            java.lang.invoke.MethodHandle mh = handle.getMethodHandle(ad.mode);
            mh.asType(ad.symbolicMethodTypeInvoker).invokeBasic(handle, arg0, arg1, arg2);
        }
    }

    @ForceInline
    @java.lang.invoke.LambdaForm.Compiled
    final static int guard_LJI_I(java.lang.invoke.VarHandle handle, Object arg0, long arg1, int arg2, java.lang.invoke.VarHandle.AccessDescriptor ad) throws Throwable {
        if (handle.vform.methodType_table[ad.type] == ad.symbolicMethodTypeErased) {
            return (int) java.lang.invoke.MethodHandle.linkToStatic(handle, arg0, arg1, arg2, handle.vform.getMemberName(ad.mode));
        }
        else {
            java.lang.invoke.MethodHandle mh = handle.getMethodHandle(ad.mode);
            return (int) mh.asType(ad.symbolicMethodTypeInvoker).invokeBasic(handle, arg0, arg1, arg2);
        }
    }

    @ForceInline
    @java.lang.invoke.LambdaForm.Compiled
    final static boolean guard_LJII_Z(java.lang.invoke.VarHandle handle, Object arg0, long arg1, int arg2, int arg3, java.lang.invoke.VarHandle.AccessDescriptor ad) throws Throwable {
        if (handle.vform.methodType_table[ad.type] == ad.symbolicMethodTypeErased) {
            return (boolean) java.lang.invoke.MethodHandle.linkToStatic(handle, arg0, arg1, arg2, arg3, handle.vform.getMemberName(ad.mode));
        }
        else {
            java.lang.invoke.MethodHandle mh = handle.getMethodHandle(ad.mode);
            return (boolean) mh.asType(ad.symbolicMethodTypeInvoker).invokeBasic(handle, arg0, arg1, arg2, arg3);
        }
    }

    @ForceInline
    @java.lang.invoke.LambdaForm.Compiled
    final static int guard_LJII_I(java.lang.invoke.VarHandle handle, Object arg0, long arg1, int arg2, int arg3, java.lang.invoke.VarHandle.AccessDescriptor ad) throws Throwable {
        if (handle.vform.methodType_table[ad.type] == ad.symbolicMethodTypeErased) {
            return (int) java.lang.invoke.MethodHandle.linkToStatic(handle, arg0, arg1, arg2, arg3, handle.vform.getMemberName(ad.mode));
        }
        else {
            java.lang.invoke.MethodHandle mh = handle.getMethodHandle(ad.mode);
            return (int) mh.asType(ad.symbolicMethodTypeInvoker).invokeBasic(handle, arg0, arg1, arg2, arg3);
        }
    }

    @ForceInline
    @java.lang.invoke.LambdaForm.Compiled
    final static void guard_LJJ_V(java.lang.invoke.VarHandle handle, Object arg0, long arg1, long arg2, java.lang.invoke.VarHandle.AccessDescriptor ad) throws Throwable {
        if (handle.vform.methodType_table[ad.type] == ad.symbolicMethodTypeErased) {
            java.lang.invoke.MethodHandle.linkToStatic(handle, arg0, arg1, arg2, handle.vform.getMemberName(ad.mode));
        }
        else if (handle.vform.getMethodType_V(ad.type) == ad.symbolicMethodTypeErased) {
            java.lang.invoke.MethodHandle.linkToStatic(handle, arg0, arg1, arg2, handle.vform.getMemberName(ad.mode));
        }
        else {
            java.lang.invoke.MethodHandle mh = handle.getMethodHandle(ad.mode);
            mh.asType(ad.symbolicMethodTypeInvoker).invokeBasic(handle, arg0, arg1, arg2);
        }
    }

    @ForceInline
    @java.lang.invoke.LambdaForm.Compiled
    final static boolean guard_LJJJ_Z(java.lang.invoke.VarHandle handle, Object arg0, long arg1, long arg2, long arg3, java.lang.invoke.VarHandle.AccessDescriptor ad) throws Throwable {
        if (handle.vform.methodType_table[ad.type] == ad.symbolicMethodTypeErased) {
            return (boolean) java.lang.invoke.MethodHandle.linkToStatic(handle, arg0, arg1, arg2, arg3, handle.vform.getMemberName(ad.mode));
        }
        else {
            java.lang.invoke.MethodHandle mh = handle.getMethodHandle(ad.mode);
            return (boolean) mh.asType(ad.symbolicMethodTypeInvoker).invokeBasic(handle, arg0, arg1, arg2, arg3);
        }
    }

    @ForceInline
    @java.lang.invoke.LambdaForm.Compiled
    final static long guard_LJJJ_J(java.lang.invoke.VarHandle handle, Object arg0, long arg1, long arg2, long arg3, VarHandle.AccessDescriptor ad) throws Throwable {
        if (handle.vform.methodType_table[ad.type] == ad.symbolicMethodTypeErased) {
            return (long) java.lang.invoke.MethodHandle.linkToStatic(handle, arg0, arg1, arg2, arg3, handle.vform.getMemberName(ad.mode));
        }
        else {
            MethodHandle mh = handle.getMethodHandle(ad.mode);
            return (long) mh.asType(ad.symbolicMethodTypeInvoker).invokeBasic(handle, arg0, arg1, arg2, arg3);
        }
    }

}
